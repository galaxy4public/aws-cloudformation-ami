# vim:set ft=yaml ts=2 sts=2 sw=2 et:
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  A self-terminating stack that produces a machine image for a CentOS 8
  minimal system
Parameters:
  BootstrapImage:
    Description: >-
      AMI for the bootstrap instance, should be using 'rpm' and support
      'cloud-init' (if empty will use latest Amazon Linux 2 AMI)
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs'
  BootstrapInstanceType:
    Description: >-
      Instance type to use for the bootstrap image
    Type: String
    Default: t3.micro
  BootstrapVolumeSize:
    Description: >-
      Size of the bootstrap volume that would be used as for the root filesystem
      (in GB)
    Type: Number
    Default: 8
    MinValue: 8
    ConstraintDescription: must be greater than 8 gigabytes
  VpcId:
    Type: String
    Description: >-
      VPC where the bootstrap instance will be launched.  If you do not specify
      this parameter you need to ensure that the default security group allows
      outbound traffic on tcp/80 and tcp/443
    Default: ''
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: >-
      Id of the subnet where the bootstrap instance is going to be launched
      (must have Internet connectivity to download packages!)
  PreserveStack:
    Type: String
    Description: >-
      Whether this stack should be preserved after generation of the image or
      not
    Default: False
    AllowedValues:
      - False
      - True
    ConstraintDescription: must be either False or True, no other values are accepted
  KeyName:
    Type: String
    Description: >-
      Key pair name to install on the bootstrap image in case you need to debug
      the bootstrap process
    Default: ''
  BootstrapScriptUrl:
    Type: String
    Description: >-
      An URL of the alternative bootstrap script
    Default: ''
  ParentStackId:
    Type: String
    Description: >-
      The ID of the parent stack.  Required if this stack is nested in another
      stack
    Default: ''
  UserData:
    Type: String
    Description: >-
      Additional commands to execute just before the image is going to be
      created
    Default: ''
  UpdateTrigger:
    Type: String
    Description: >-
      Every time this parameter changes the associated stack would go through
      the CloudFormation update routine, so if you want to regenerate the
      resulting AMI provide a different value each time you run the stack
      update
    Default: ''
  S3Bucket:
    Type: String
    Description: >-
      An S3 bucket name (possibly with the path) from where the bootstrap
      scripts would be allowed to retrieve objects
    Default: ''
  AmiName:
    Type: String
    Description: >-
      Specifies the Name tag associated with the created AMI.
    Default: ''
  TargetOS:
    Type: String
    Description: >-
      The target OS this stack is going to build AMI for.
    Default: centos7
    AllowedValues:
      - centos7
      - centos8
    ConstraintDescription: must be from a list of supported OSes
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Required Configuration
        Parameters:
          - SubnetId
      - Label:
          default: Optional Configuration
        Parameters:
          - VpcId
          - BootstrapImage
          - BootstrapInstanceType
          - BootstrapVolumeSize
          - BootstrapScriptUrl
          - UserData
      - Label:
          default: Debug / Internal Configuration
        Parameters:
          - KeyName
          - PreserveStack
          - ParentStackId
          - UpdateTrigger
    ParameterLabels:
      VpcId:
        default: VPC ID
      SubnetId:
        default: SubnetId
      BootstrapImage:
        default: Bootstrap AMI
      BootstrapInstanceType:
        default: Bootstrap Instance Type
      BootstrapVolumeSize:
        default: Bootstrap Volume Size (GB)
      BootstrapScriptUrl:
        default: Bootstrap Script URL
      UserData:
        default: Additional bootstrap code
      KeyName:
        default: SSH Key Name
      PreserveStack:
        default: Preserve Created Stack?
      ParentStackId:
        default: Parent Stack ID
      UpdateTrigger:
        default: Update Trigger
Conditions:
  useKeyName: !Not
    - !Equals
      - !Ref KeyName
      - ''
  useVpcId: !Not
    - !Equals
      - !Ref VpcId
      - ''
  useParentStackId: !Not
    - !Equals
      - !Ref ParentStackId
      - ''
  useS3Bucket: !Not
    - !Equals
      - !Ref S3Bucket
      - ''
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-RolePolicy'
          PolicyDocument:
            Statement:
              - Resource:
                  - '*'
                Action:
                  - cloudformation:DescribeStacks
                  - ec2:DescribeInstances
                  - ec2:GetConsoleOutput
                  - ec2:DescribeVolumes
                  - ec2:CreateSnapshot
                  - ec2:DeleteSnapshot
                  - ec2:DescribeSnapshots
                  - ec2:DescribeSubnets
                  - ec2:CreateImage
                  - ec2:DescribeImages
                  - ec2:RegisterImage
                  - ec2:DeregisterImage
                  - ec2:CreateTags
                Effect: Allow
              - Resource:
                  - !Sub 'arn:aws:ec2:${AWS::Region}::image/*'
                  - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                  - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*'
                  - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'
                  - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${SubnetId}'
                  - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*'
                  - !If
                    - useKeyName
                    - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/${KeyName}'
                    - !Ref 'AWS::NoValue'
                Action:
                  - ec2:RunInstances
                Effect: Allow
              - Resource:
                  - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
                Action:
                  - ec2:TerminateInstances
                Condition:
                  StringEquals:
                    'ec2:InstanceType':
                      - !Ref BootstrapInstanceType
                    'ec2:ResourceTag/purpose':
                      - build-image
                Effect: Allow
              - Resource:
                  - !Ref 'AWS::StackId'
                Action:
                  - cloudformation:GetTemplate
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStackResources
                  - cloudformation:DescribeStackEvents
                Effect: Allow
              - Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:instance-profile/${AWS::StackName}-InstanceProfile-*'
                Action:
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:DeleteInstanceProfile
                Effect: Allow
              - Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-Role-*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-RolePolicy'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-LER-*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-LERP'
                Action:
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:DeleteRole
                Effect: Allow
              - Resource:
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-ExtractAmiId-*'
                Action:
                  - lambda:InvokeFunction
                  - lambda:DeleteFunction
                Effect: Allow
              - !If
                - useParentStackId
                - Resource:
                    - !Ref ParentStackId
                  Action:
                    - cloudformation:DescribeStackEvents
                  Effect: Allow
                - !Ref 'AWS::NoValue'
              - !If
                - useVpcId
                - Resource:
                    - '*'
                  Action:
                    - ec2:CreateSecurityGroup
                    - ec2:DescribeSecurityGroups
                  Effect: Allow
                - !Ref 'AWS::NoValue'
              - !If
                - useVpcId
                - Resource:
                    - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*'
                  Action:
                    - ec2:DeleteSecurityGroup
                    - ec2:RevokeSecurityGroupIngress
                    - ec2:RevokeSecurityGroupEgress
                    - ec2:AuthorizeSecurityGroupIngress
                    - ec2:AuthorizeSecurityGroupEgress
                  Effect: Allow
                - !Ref 'AWS::NoValue'
              - !If
                - useS3Bucket
                - Resource:
                    - !Sub 'arn:aws:s3:::${S3Bucket}/*'
                  Action:
                    - s3:GetObject
                  Effect: Allow
                - !Ref 'AWS::NoValue'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role
  BootstrapSecurityGroup:
    Condition: useVpcId
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: >-
        A temporary security group to allow the bootstrap instance retrieve
        software for the installation purposes
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: []
      VpcId: !Ref VpcId
  BootstrapInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref BootstrapImage
      InstanceType: !Ref BootstrapInstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !If
        - useKeyName
        - !Ref KeyName
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: bootstrap-image
        - Key: purpose
          Value: build-image
      BlockDeviceMappings:
        - DeviceName: /dev/sdf
          Ebs:
            VolumeSize: !Ref BootstrapVolumeSize
            VolumeType: gp2
      NetworkInterfaces:
        - AssociatePublicIpAddress: True
          DeviceIndex: 0
          DeleteOnTermination: True
          SubnetId: !Ref SubnetId
          GroupSet:
            - !If
              - useVpcId
              - !Ref BootstrapSecurityGroup
              - !Ref 'AWS::NoValue'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update stack trigger: ${UpdateTrigger}
          export AWS_DEFAULT_REGION='${AWS::Region}'
          export cfnStackId='${AWS::StackId}'
          export cfnSignalURL='${BootstrapWaitHandle}'
          export AMI_NAME_TAG='${AmiName}'
          [ -n '${ParentStackId}' ] && export cfnParentStackId='${ParentStackId}' || export cfnParentStackId='${AWS::StackId}'
          [ "$(printf '%s' '${PreserveStack}' | tr '[[:upper:]]' '[[:lower:]]')" == true ] && export PRESERVE_STACK=true || export PRESERVE_STACK="${!cfnStackId#$cfnParentStackId}"
          set -exu -o pipefail
          if [ -n '${BootstrapScriptUrl}' ]; then
            curl -qsS4f --retry 180 --retry-delay 1 '${BootstrapScriptUrl}' -o /root/bootstrap.sh
          else
            curl -qsS4f --retry 180 --retry-delay 1 'https://raw.githubusercontent.com/galaxy4public/aws-cloudformation-ami/master/bootstrap/${TargetOS}.sh' -o /root/bootstrap.sh
          fi
          chmod 0700 /root/bootstrap.sh
          if [ -n '${UserData}' ]; then
            mkdir -p -m700 /root/bootstrap.d
            printf '%s' '${UserData}' > /root/bootstrap.d/99-custom-user-data.sh
          fi
          # Bootstrap it!
          /root/bootstrap.sh >&2
  BootstrapWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}
  BootstrapWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: BootstrapInstance
    Properties:
      Handle: !Ref BootstrapWaitHandle
      Timeout: 4800
  LER:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-LERP'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group/aws/lambda/${AWS::StackName}-ExtractAmiId-*'
  ExtractAmiId:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import cfnresponse

          def handler(event, context):
            print("Received request:\n", json.dumps(event))
            if event["RequestType"] == 'Delete':
              return cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            try:
              import json
              reponseData = json.loads(event["ResourceProperties"]["JSON"])
            except Exception as e:
              return cfnresponse.send(event, context, cfnresponse.FAILED, { Error: '{}'.format(e) })
            return cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
      Handler: index.handler
      Runtime: python3.7  # ZipFile is not supported with python3.8 as of 2020-11-07
      Timeout: 30
      Role: !GetAtt
        - LER
        - Arn
  AmiLambda:
    Type: Custom::Ami
    DependsOn:
      - BootstrapWaitCondition
    Properties:
      ServiceToken: !GetAtt
        - ExtractAmiId
        - Arn
      JSON: !GetAtt
        - BootstrapWaitCondition
        - Data
Outputs:
  AmiId:
    Value: !GetAtt
      - AmiLambda
      - AmiId
    Description: The resulting AMI created by the stack
